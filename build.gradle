buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
        sonarGradlePluginVersion = '2.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('org.junit.platform:junit-platform-gradle-plugin:1.0.0')
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarGradlePluginVersion}")
        classpath("org.ajoberstar:gradle-jacoco:0.1.0")
    }
}

plugins {

    // core plugins
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'maven-publish'

    // Spring plugins
    id "org.springframework.boot" version "1.5.2.RELEASE"
    id "io.spring.dependency-management" version "0.6.0.RELEASE"

    // JFrog Artifactory plugins
    id "com.jfrog.artifactory" version "4.4.12"
    id "org.asciidoctor.convert" version "1.5.3"

    // Lombok
    id 'io.franzbecker.gradle-lombok' version '1.8'

    //Sonarqube
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.tokyoOlympicGames.manager'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    swaggerVersion = '2.6.1'
    springCloudVersion = 'Edgware.SR2'
}

dependencies {

    // Spring Cloud
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    compile('org.springframework.cloud:spring-cloud-starter-hystrix-dashboard')

    //Mockito
    testCompile(group: 'org.easymock', name: 'easymock', version: '3.5')

    // Swagger dependencies
    compile group: 'io.springfox', name: 'springfox-swagger2', version: "${project.ext['swaggerVersion']}", transitive: true
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${project.ext['swaggerVersion']}", transitive: true

    // Hibernate
    compile 'com.yahoo.elide:elide-datastore-hibernate5:1.0.0.19'
    compile 'org.hibernate:hibernate-entitymanager:5.0.7.Final'
    compile 'org.hibernate:hibernate-core:5.0.7.Final'

    // Spring boot
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // Log4j
    compile('org.apache.logging.log4j:log4j:2.9.0')

    // Gson
    compile(group: 'com.google.code.gson', name: 'gson', version: '2.7')

    // Data Base
    runtime('org.hsqldb:hsqldb')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sonarqube {
    properties {
        // Sonar Specific properties
        property "sonar.projectName", "Tokyo.Olympic.Games"
        property "sonar.projectKey", "org.sonarqube:tokyoolympicgames.manager"
        property 'sonar.host.url', 'http://localhost:9000' // This is the Sonar Server
        //property 'sonar.jacoco.reportPaths', ''
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '7.6.1'
        ignoreFailures = true
        configFile = new File(rootDir, "/config/checkstyle/google_checks.xml")
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled true
            html.enabled true
            //html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
        }
    }
}

task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst("file:/", '/')
            }.join(" ")
        }
    }
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
    dependsOn pathingJar
    doFirst {
        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}